<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入配置文件 导入属性配置 -->
    <properties resource="generator.properties"></properties>

    <!-- 一个数据库一个context -->
    <context id="default"  defaultModelType="flat" targetRuntime="MyBatis3">

        <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化 Java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!--  在DAO层接口文件  增加@Mapper注解 -->
        <plugin type="org.mybatis.generator.plugins.MapperAnnotationPlugin" >
            <property name="author" value="imacco"/>
            <property name="dateFormat" value="yyyy/MM/dd"/>
        </plugin>
        <!-- 重新生成代码,xml内容覆盖 -->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />
        <!-- 实体类生成序列化属性 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 实体类重写HashCode()和equals() -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <!-- 实体类重写toString() -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 实体类使用链式赋值 setter -->
        <plugin type="org.mybatis.generator.plugins.EntityChainPlugin"/>

        <!-- 在创建class时，对注释进行控制 -->
        <commentGenerator type="org.mybatis.generator.internal.MyCommentGenerator">
            <property name="suppressAllComments" value="false"/><!-- 是否取消注释 -->
            <property name="author" value="ctrl-github"/> <!-- java文件中作者名称 -->
            <property name="xml-author" value=""/> <!-- xml文件中作者名称 -->
            <property name="dateFormat" value="yyyy/MM/dd"/>
            <property name="dateTimeFormat" value="true"/> <!-- 是否对时间字段进行格式化  默认不格式化 -->
        </commentGenerator>

        <!-- jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
            <!--设置可以获取tables remarks信息-->
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制  type="generate.plugins.JavaTypeResolverTinyintToBooleanImpl"-->
        <javaTypeResolver type="org.mybatis.generator.internal.types.MyJavaTypeResolver">
            <property name="forceBigDecimals" value="false"/>
            <property name="useJSR310Types" value="false"/>
        </javaTypeResolver>

        <!-- 生成Domain(entity) 实体 模型：包名(targetPackage)、位置(targetProject) -->
        <javaModelGenerator
                targetPackage="org.example.entity"
                targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </javaModelGenerator>

        <!-- 生成Mapper 接口xml映射文件：包名(targetPackage)、位置(targetProject) -->
        <sqlMapGenerator
                targetPackage="mapper"
                targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成 Mapper (dao接口) 接口 的位置 -->
        <javaClientGenerator
                type="XMLMAPPER"
                targetPackage="org.example.dao"
                targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 设置数据库的表名和实体类名 -->
        <table schema="" tableName="t_User" domainObjectName="User"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            <!--
            useActualColumnNames
                true
                    MyBatis Generator会使用数据库中实际的字段名字作为生成的实体类的属性名。
                false
                    这是默认值。如果设置为false,则MyBatis Generator会将数据库中实际的字段名字转换为Camel Case风格作为生成的实体类的属性名。
            -->
            <property name="useActualColumnNames" value="true" />
            <!-- generatedKey用于生成生成主键的方法  identity true  <selectKey order="AFTER"> / false  <selectKey order="BEFORE"> -->
            <generatedKey column="ID" sqlStatement="Mysql"  identity="true"/>
            <!-- 指定列的java数据类型 -->
            <columnOverride column="ID" property="id" javaType="Integer" />
        </table>

    </context>
</generatorConfiguration>